// Copyright (c) 2013, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Health Thermometer Profile
//
// Sends the tmeperature from the onboard sensor every TEMPERATURE_POLL_MS msec
//
// If you decide to have this application to autorun then set the
// #define ENABLE_DEBUG_PRINTS to suppress all debugging messages which are
// sent out via the UART.
// If the UART is not connected to the host and debugging is enabled then at
// some point the internal tx buffer will fill up and when there is no more
// space in that buffer the run-time engine will stall as it will block for
// more space in the buffer.
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

        //Set this to 0 to disable all debugging messages
#define ENABLE_DEBUG_PRINTS                  1

#define DEVICENAME                           "LAIRD_TS"
#define DEVICENAME_WRITABLE                  1
#define APPEARANCE                           BLE_APPEARANCE_GENERIC_THERMOMETER
#define MANF_NAME                            "Laird Technologies"
#define MODELSTR                             "BL600"
#define SERIALNUM                            "12345"
#define HWREV                                "HwRev1.0"
#define SWREV                                "SwRev1.0"
#define SYSID                                "\01\02\03\04\05\06\07\08"
//#define SYSID                                "@"
//#define REGLIST                              "\DE\AD\C0\DE"
#define REGLIST                              ""
//#define PNPID                                "\01\04\BF\03\20\00\01"
#define PNPID                                ""
#define CHAR_CR                              13


        //Minimum acceptable connection interval (0.5 seconds)
#define MIN_CONN_INTERVAL                    80000
        //Maximum acceptable connection interval (1 second).
#define MAX_CONN_INTERVAL                    100000
        //Slave latency -- number of conn events that can be missed
#define SLAVE_LATENCY                        1
        //Connection supervisory timeout (4 seconds) - max 32 seconds
#define CONN_SUP_TIMEOUT                     4000000
        //DiscoverableMode, set to BLE_DISCOVERABILITY_xxx
#define DISCOVERY_MODE                       BLE_DISCOVERABILITY_GENERAL
#define MAX_DEVNAME_CHRS                     10
        //Set Appearance advertise 0 to suppress
#define ADV_APPEARANCE                       1
        //Advertise interval
#define ADV_INTERVAL_MS                      25
        //Advertise timeout
#define ADV_TIMEOUT_MS                       300000

        //Whitelist Policy in Adverts
#define ADV_WHITELIST_FILTER_POLICY          ADV_FILTERPOLICY_ANY

        //Minimum long term key size in octets
#define MIN_LTK_SIZE                         8
        //Maximum long term key size in octets
#define MAX_LTK_SIZE                         16

        //Set this to non-zero to enable notify on batt service
#define BATT_NOTIFY                          0
#define BATT_INIT_LEVEL_PERC                 100

        //This sets the pairing i/o capability using bonding
#define PAIRING_IOCAPABILITY                 BLE_IOCAPABILITY_NONE

        //Connection Update Negotiation paramters
#define FIRST_CONN_PARAMS_UPDATE_DELAY       5000
#define NEXT_CONN_PARAMS_UPDATE_DELAY        5000
#define MAX_CONN_PARAMS_UPDATE_DELAY         15000

        //The temperature sensor is polled this timeout
#define TEMPERATURE_POLL_MS                  (1000)

        //Whether to require bonding or not
#define REQUIRE_BONDING                      1



//******************************************************************************
// Library Import
//******************************************************************************
#include "lib\debugging.routines.sblib"
#include "lib\ble.sblib"
#include "lib\standard.advert.mngr.sblib"
#include "lib\advert.report.manager.sblib"
#include "lib\connection.manager.sblib"
#include "lib\security.manager.sblib"
#include "lib\gap.service.sblib"
#include "lib\device.information.service.sblib"
#include "lib\custom.battery.service.sblib"
#include "lib\custom.health.thermometer.service.sblib"

//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim msg$
dim dt$
dim advFlags                 //Value for flags AD

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

dt$=""
advFlags = DISCOVERY_MODE    //Can be changed via 'fg' command

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************

//==============================================================================
//==============================================================================
sub InitTempSensor()
  dim rc

  //Poll sensor on a timer
  TimerStart(0,TEMPERATURE_POLL_MS,1)

  //Temperature sensor is AIN4 which is on the S3 pin
  rc = GpioSetFunc(4,1,2)  //Remove the pull resistor
  AssertResCode(rc,1000)

  rc = GpioSetFunc(4,3,0)  //Set as analog in
  AssertResCode(rc,1010)
endsub

//==============================================================================
// Bandgap = 1200mv
// Max Adc = 1024
// Input scaled by 2/3
//
// Hence mV = (((adc/MaxADC) * Bandgap)*3)/2
// refactoring for integer maths gives
//  mv = (adc * Bandgap * 3)/(MaxADC*2)
//  mv = (adc * 1200 * 3)/(1024 * 2)
//  mv = (adc *  600 * 3)/1024
//  mv = (adc *  150 * 3)/256
//  mv = (adc *   75 * 3)/128
//  mv = (adc *   225)/128
//==============================================================================
function Adc2Mv(adc)
  adc = (adc * 225)/128
endfunc adc

//==============================================================================
//  ((1864-mV)*16)/1889 * 10 in 10th of mV
//==============================================================================
function Mv2Temperature(mv)
  mv = ((1864-mV) * 160)/189
endfunc mv


//==============================================================================
// This is called to start things off just before the waitevent at the end of
// the file
//==============================================================================
sub OnStartup()

  InitSecurityMngr(PAIRING_IOCAPABILITY,MIN_LTK_SIZE, MAX_LTK_SIZE)

  //Initialise services
  InitGapService()
  InitDisService()
  InitHtsService(BLE_HTS_TEMP_TYPE_BODY)  //See lib/ble.sblib for more defines
  InitBatService(BATT_INIT_LEVEL_PERC,BATT_NOTIFY)  //2nd parameter will be allowed to be 1 in future

  //Initiliase advert and scan reports
  InitAdvReports(advFlags)

endsub

//==============================================================================
//==============================================================================
function StartAds(adv as integer) as integer
  dim rc
  rc=StartAdverts(adv)
  AssertResCode(rc,1100)
  if rc==0 then
    DbgMsgVal("Start Adverts",adv)
  endif
endfunc rc


//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when TIMER 0 expires
//==============================================================================
function HandlerTimer0() as integer
  dim mV,tmp

  if hConn != BLE_CONN_HANDLE_INVALID then
    //IN A CONNECTION
    if indState==1 then
      //Make a sensor reading
      mv = Adc2Mv(GpioRead(4))
      //DbgMsg("\nAdc mV=") : DbgVal(mv)

      tmp = Mv2Temperature(mv)
      //Update the variables in the library
      tempMant = tmp
      tempExp  = -1
      //DbgMsg("\nTemperature=") : DbgVal(tmp)
      if indwait == 0 then
        if SendThermData() == 0 then
          indwait = 1
          DbgMsgVal("\nTemperature = ",tempMant)
        endif
      endif
    endif
  endif

endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerBlrAdvTimOut() as integer

  if AdvMngrOnAdvTimeOut() == 0 then

    DbgMsg( "\nAdvert stopped via timeout" )
    //DbgMsg( "\n   - could use SystemStateSet(0) to switch off" )

    //------------------------------------------------------------
    //  Switch off the system - requires a power cycle to recover
    //------------------------------------------------------------
    //  rc = SystemStateSet(0)
    //  AssertResCode(rc,1199)
  endif

endfunc 1

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer
  //Inform libraries
  ConnMngrOnBleMsg(nMsgId,nCtx)
  AdvMngrOnBleMsg(nMsgId,nCtx)

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    DbgMsgVal(" --- Connect : ",nCtx)

  case BLE_EVBLEMSGID_DISCONNECT
    indwait = 0
    DbgMsgVal(" --- Disconnect : ",nCtx)

  case BLE_EVBLEMSGID_HTS_INDICATION_STATE
    DbgMsgVal(" +++ HTS IND STATE = ",nCtx)
    //if nCtx == 1 then
      //Indications have been enabled
    //endif

  case BLE_EVBLEMSGID_HTS_INDICATION_CNF
    DbgMsg(" +++ HTS IND CNF")
    // Can send next measurement data

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg(" +++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg(" +++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg(" +++ Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Negotiation FAILED")

  case else
    DbgMsgVal("Unknown Ble Msg", nMsgId)
  endselect

endfunc 1

//==============================================================================
// This handler is called when there is a APP message which was thrown using the
// SendMsgApp(msgId,msgCtx) function from within the library so that the library
// can inform the app that something has happened or needs doing
//==============================================================================
function HandlerMsgApp(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

  //select nMsgId
  //case 0
  //case else
  //  DbgMsgVal(" ??? Unknown App Msg",nMsgId )
  //endselect

endfunc 1

//==============================================================================
// This handler is called when there is a CHARCCCD message
//==============================================================================
function HandlerCharCccd(BYVAL hChar AS INTEGER, BYVAL nVal AS INTEGER) as integer

  if hChar == chHtsMeas then
    //The following if statment to convert to 1 is only so that we can submit
    //this app to the regression test
    if nVal then
      if nVal==2 then
        nVal = 1
      else
        nVal = 0
      endif
    endif
    HtsOnCharCccd(nVal)
    DbgMsgVal(" +++ HTS IND STATE = ",nVal)
  else
    DbgMsgVal(" +++ New CCCD : ",hChar)
  endif
endfunc 1

//==============================================================================
// This handler is called when there is a CHARHVC message
//==============================================================================
function HandlerCharHvc(BYVAL hChar AS INTEGER) as integer
  if hChar == chHtsMeas then
    HtsOnCharHvc()
    DbgMsg(" +++ HTS IND CNF")
  else
    DbgMsgVal(" +++ HVC : ",hChar)
  endif
endfunc 1


//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------
OnEvent  EVTMR0             call HandlerTimer0
OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent  EVBLEMSG           call HandlerBleMsg
OnEvent  EVMSGAPP           call HandlerMsgApp
OnEvent  EVCHARCCCD         call HandlerCharCccd
OnEvent  EVCHARHVC          call HandlerCharHvc

//------------------------------------------------------------------------------
// Initialise and then wait for events
//------------------------------------------------------------------------------
dim rc

//Initialise the temperature sensor
InitTempSensor()

//Create Advert packets and register services
OnStartup()
rc=StartAds(ADV_IND)

//------------------------------------------------------------------------------
// Wait for a synchronous event.
// An application can have multiple <WaitEvent> statements
//------------------------------------------------------------------------------
WaitEvent


