'//******************************************************************************
'// Laird Technologies (c) 2013
'//
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'// +++++                                                                      ++
'// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
'// +++++  which consists of all characters up to the first . and excluding it ++
'// +++++                                                                      ++
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'//
'// Heart Rate Profile
'//
'//   When you run the app you will get a > command prompt to allow you to submit
'//   commands as follows:-
'//
'//     hr nnnn           - set heart rate (decimal)
'//     rr nnnn           - add rr interval data (16 bit decimal)
'//     ky nnnn           - set pairing passcode (decimal)
'//     ai nnnn           - set advertising interval in milliseconds
'//     at nnnn           - set advertising timeout in milliseconds
'//     tp nnnn           - set tx power to that specified
'//     sc n              - set sensor contact, n=0 for not, 1 for contact
'//     ad n              - if n=0 then stop adverts otherwise start adverts if
'//                            n=1 then ADV_IND
'//                            n=2 then ADV_DIRECT_IND
'//                            n=3 then ADV_SCAN_IND
'//                            n=4 then ADV_NONCONN_IND
'//     bl nn             - set battery level to nn %
'//     ma nnnnn..nnn     - set mac address - 14 hex digits
'//                            First two must be 00 for IEEE mac adress
'//                                              01 for private random address
'//     devname           - get devicename and print it
'//     discon            - disconnect
'//     send              - send data to peer
'//     quit              - quit app to command mode via reset
'//     txpower           - display current tx power
'//     stop              - exit app to command mode and can resume using RESUME command
'//     dc n              - if n=0 then DCDC if OFF
'//                            n=2 then DCDC is AUTO
'//                            n=anything_else then DCDC is ON
'//     in nnnn           - set min conn interval (us)
'//     ix nnnn           - set max conn interval (us)
'//     st nnnn           - set supervision timeout (us)
'//     sl nnnn           - set slave latency
'//     negp              - negotiate connection parameters
'//     dr aaaaaa         - set device name with read only
'//     dw aaaaaa         - set device name with read/write capability only
'//     db nn             - display debug info associated with nn
'//     fg n              - n is 0 to 3 (see BLE_DISCOVERABILITY_xxx )
'//
'//
'// 13 Mar 2013
'//    Created
'//
'//******************************************************************************

'//******************************************************************************
'// Definitions
'//******************************************************************************

'//******************************************************************************
'// Library Import
'//******************************************************************************
#include "lib\debugging.routines.sblib"
#include "lib\ble.sblib"
#include "lib\standard.advert.mngr.sblib"
#include "lib\advert.report.manager.sblib"
#include "lib\connection.manager.sblib"
#include "lib\security.manager.sblib"
#include "lib\gap.service.sblib"
#include "lib\device.information.service.sblib"
#include "lib\custom.battery.service.sblib"
#include "lib\custom.heart.rate.service.sblib"


'//******************************************************************************
'// Debugging resource after libs
'//******************************************************************************

'//==============================================================================
'//==============================================================================
sub DbgInfo(id as integer)
  select id
  case 0
    DbgPrnAdvReport(adRpt$)
  case 1
    DbgPrnAdvReport(scRpt$)

  case else
  endselect
endsub


'//******************************************************************************
'// Global Variable Declarations
'//******************************************************************************

dim stRsp$ as string        '//Uart rx data is stored here
dim ok$,er$
dim msg$
dim mnltk                   '//min size of ltk
dim mxltk                   '//max size of ltk
dim advFlags                '//value for flags AD
dim dn$                     '//device name

'//******************************************************************************
'// Initialisse Global Variable
'//******************************************************************************

ok$    ="\nOK\r\n>"
er$    ="\nERROR\r\n>"

mnltk    = MIN_LTK_SIZE
mxltk    = MAX_LTK_SIZE
advFlags = DISCOVERY_MODE    '//can be changed via 'fg' command

sensLoc  = BLE_HRS_BODY_SENSOR_LOCATION_CHEST   // see lib/ble.sblib for more defines

'//******************************************************************************
'// Function and Subroutine definitions
'//******************************************************************************

'//==============================================================================
'// This is called to start things off just before the waitevent at the end of
'// the file
'//==============================================================================
sub OnStartup()

  InitSecurityMngr(PAIRING_IOCAPABILITY,MIN_LTK_SIZE, MAX_LTK_SIZE)

  // Initialise services
  InitGapService()
  InitDisService()

  InitHrsService()
  InitBatService(BATT_INIT_LEVEL_PERC,BATT_NOTIFY)  //2nd parameter will be allowed to be 1 in future

  // Initiliase advert and scan reports
  InitAdvReports(advFlags)

endsub


'//==============================================================================
'//==============================================================================
sub UartRsp(rsp as integer)
  dim rc
  if rsp == 0 then
    rc = UartWrite(ok$)
  else
    rc = UartWrite(er$)
  endif
endsub

'//==============================================================================
'//==============================================================================
sub UartMsg(byref msg$ as string)
  dim rc
  rc = UartWrite(msg$)
endsub

'//==============================================================================
'//==============================================================================
function StartAds(adv as integer) as integer
  dim rc
  rc=StartAdverts(adv)
  if rc==0 then
    DbgMsgVal("Start Adverts",adv)
  endif
endfunc rc

'//==============================================================================
'//==============================================================================
function StopAds() as integer
  dim rc
  rc=StopAdverts()
  if rc==0 then
    DbgMsg("Stop Adverts")
  endif
endfunc rc

'//==============================================================================
'//==============================================================================
sub SetTxPower(txp as integer)
  dim rc
  DbgMsgVal("Set TxPower = ",txp)
  rc=BleTxPowerSet(txp)
  AssertResCode(rc,1205)
endsub

'//==============================================================================
'//==============================================================================
sub ShowConnParms(nCtx as integer)
  dim rc
  dim intrvl,sprvto,slat
  rc= BleGetCurConnParms(nCtx,intrvl,sprvto,slat)
  AssertResCode(rc,1240)
  if rc==0 then
    DbgMsgVal("Conn Interval",intrvl)
    DbgMsgVal("Conn Supervision Timeout",sprvto)
    DbgMsgVal("Conn Slave Latency",slat)
  endif
endsub


'//==============================================================================
'//==============================================================================
sub SetDeviceName(st$ as string,wr as integer)
  dim rc
  rc = BleGapSvcInit(st$,wr,APPEARANCE,MIN_CONN_INTERVAL,MAX_CONN_INTERVAL,CONN_SUP_TIMEOUT,SLAVE_LATENCY)
  AssertResCode(rc,2020)
  InitAdvReports(advFlags)
endsub

'//==============================================================================
'//==============================================================================
sub GetDeviceName()
  dn$ = BleGetDeviceName$()  
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "Device name = ";dn$;"\n"
  endif
endsub

'//==============================================================================
'// Expecting to see XX=nnn\n\r  where nnn =1 to 2 digit decimal number
'//==============================================================================
function OnUartCmd(stData$,datalen) as integer
  dim rc
  dim stRS$
  dim vl$
  dim vl
  dim rsp
  rsp=0  '//assume OK response
  if datalen >= 4 then

    '//drop the terminating CR
    datalen = datalen - 1
    stData$ = left$(stData$,datalen)

    stRS$ = strsplitleft$(stData$,3)
    if     strcmp(stRS$,"hr ")==0 then  // heart rate in beats per minute
      hrtRate = strvaldec(stData$)

    elseif  strcmp(stRS$,"rr ")==0 then  // rr interval add
      vl = strvaldec(stData$)
      rc = AddRrData(vl)
      if rc != 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"bl ")==0 then
      vl = strvaldec(stData$)
      if SetBattLevel(vl) != 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"db ")==0 then
      DbgInfo(strvaldec(stData$))

    elseif strcmp(stRS$,"tp ")==0 then
      SetTxPower(strvaldec(stData$))

    elseif strcmp(stRS$,"dc ")==0 then
      BleConfigDcDc(strvaldec(stData$))

    elseif strcmp(stRS$,"sc ")==0 then
      sensCntct = strvaldec(stData$)

    elseif strcmp(stRS$,"dr ")==0 then
      SetDeviceName(stData$,0)

    elseif strcmp(stRS$,"dw ")==0 then
      SetDeviceName(stData$,1)

    elseif strcmp(stRS$,"dev")==0 then  //get and print the device name
      GetDeviceName()

    elseif strcmp(stRS$,"dis")==0 then  //disconnect
      if Disconnect(hConn) != 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"ky ")==0 then
      vl = strvaldec(stData$)
      rc = SecSendPassKey(hConn,vl)

    elseif  strcmp(stRS$,"ai ")==0 then  // advertising interval in milliseconds
      if SetAdvertInt(strvaldec(stData$)) == 0 then
        rsp = 1
      endif

    elseif  strcmp(stRS$,"at ")==0 then  // advertising timeout in milliseconds
      if SetAdvertTout(strvaldec(stData$)) == 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"fg ")==0 then   //Flags AD value (0..3) see BLE_DISCOVERABILITY_xxx
      advFlags = strvaldec(stData$)

    elseif strcmp(stRS$,"ad ")==0 then
      vl = strvaldec(stData$)
      if vl==0 then
        rc= StopAds()
      else
        vl=vl-1
        rc= StartAds(vl)
      endif
      if rc != 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"ma ")==0 then
      vl$ = strdehexize$(stData$)
      vl=strlen(vl$)
      if vl!=7 then
        rsp = 1
      else
        addr$ = vl$
      endif

    elseif strcmp(stRS$,"sen")==0 then
      if SendHrData() != 0 then
        rsp = 1
      endif

    elseif strcmp(stRS$,"txp")==0 then
      DbgMsgVal("Current Tx Power = ",sysinfo(2008))

    elseif strcmp(stRS$,"qui")==0 then
      reset(0)
      exitfunc 0

    elseif strcmp(stRS$,"sto")==0 then
      stop

    elseif  strcmp(stRS$,"in ")==0 then  // minimum interval (us) for conn parameters
      minint = strvaldec(stData$)

    elseif  strcmp(stRS$,"ix ")==0 then  // maximum interval (us) for conn parameters
      maxint = strvaldec(stData$)

    elseif  strcmp(stRS$,"st ")==0 then  // supervision teimout (us) for conn parameters
      sprtout = strvaldec(stData$)

    elseif  strcmp(stRS$,"sl ")==0 then  // slave latency for conn parameters
      slatncy = strvaldec(stData$)

    elseif strcmp(stRS$,"neg")==0 then
      rc = ConnNewParms(hConn)
      AssertResCode(rc,1250)
      if rc != 0 then
        rsp = 1
      endif

    else
      rsp = 1

    endif

  else
    rsp = 1

  endif

  '// send a response back to the user
  UartRsp(rsp)

endfunc 1

'//******************************************************************************
'// Handler definitions
'//******************************************************************************

'//==============================================================================
'// This handler is called when there is a BLE message
'//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

  '// Inform libraries
  ConnMngrOnBleMsg(nMsgId,nCtx)
  AdvMngrOnBleMsg(nMsgId,nCtx)

  '// Let the library deal with it first
  HrsOnBleMsg(nMsgId,nCtx)

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    DbgMsgVal(" --- Connect : ",nCtx)
     ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_DISCONNECT
    DbgMsgVal(" --- Disconnect : ",nCtx)

  //case BLE_EVBLEMSGID_HRS_NOTIFICATION_STATE
  //  DbgMsgVal(" --- Hrs Notification : ",nCtx)

  case BLE_EVBLEMSGID_DEVICENAME_WRITE
    DbgMsg(" --- DevName Write : ")

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg(" +++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg(" +++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg(" +++ Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
     ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Negotiation FAILED")

  case else
    DbgMsgVal("Unknown Ble Msg ",nMsgId)
  endselect
endfunc 1

'//==============================================================================
'// This handler is called when there is a CHARCCCD message
'//==============================================================================
function HandlerCharCccd(BYVAL hChar AS INTEGER, BYVAL nVal AS INTEGER) as integer
  if hChar == chHrsMeas then
    DbgMsgVal(" --- Hrs Notification : ",nVal)
  else
    DbgMsgVal(" --- New CCCD : ",nVal)
  endif
endfunc 1

'//==============================================================================
'// This handler is called when data has arrived at the serial port
'//==============================================================================
function HandlerUartRx() as integer
  dim nMatch
  dim stData$

  nMatch=UartReadMatch(stRsp$,13)
  if nMatch!=0 then
    stData$ = strsplitleft$(stRsp$,nMatch)
    exitfunc OnUartCmd(stData$,nMatch)
  endif
endfunc 1

'//==============================================================================
'// This handler is called when an advertisment has timed out
'//==============================================================================
function HandlerBlrAdvTimOut() as integer

  if AdvMngrOnAdvTimeOut() == 0 then

    DbgMsg( "\nAdvert stopped via timeout" )
    '//DbgMsg( "\n   - could use SystemStateSet(0) to switch off" )

    '//------------------------------------------------------------
    '//  Switch off the system - requires a power cycle to recover
    '//------------------------------------------------------------
    '//  rc = SystemStateSet(0)
    '//  AssertResCode(rc,1199)
  endif

endfunc 1


'//******************************************************************************
'// Equivalent to main() in C
'//******************************************************************************

'//------------------------------------------------------------------------------
'// Enable synchronous event handlers
'//------------------------------------------------------------------------------
OnEvent  EVUARTRX           call HandlerUartRx
OnEvent  EVBLEMSG           call HandlerBleMsg
OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent  EVCHARCCCD         call HandlerCharCccd

'//------------------------------------------------------------------------------
'// Initialise and then wait for events
'//------------------------------------------------------------------------------
if (AUTO_STARTUP & 1) != 0 then
  //Create Advert packets and register services
  OnStartup()
endif
if (AUTO_STARTUP & 2) != 0 then
  //Start advertising
  dim rc
  rc=StartAds(ADV_IND)
endif

'//Send user prompt for uart based command interface
msg$="\n\r"
UartMsg(msg$)
msg$=DEVICENAME
UartMsg(msg$)
//msg$="\n\r"
//UartMsg(msg$)

'//Send an OK response
UartRsp(0)

