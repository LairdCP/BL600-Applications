'//******************************************************************************
'// Laird Technologies (c) 2013
'//
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'// ######                                                                #######
'// ######        Library File meant to be #included in files             #######
'// ######                                                                #######
'// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'//
'// This library contains contains a standard advert manager and should be
'// #included in your app
'//
'//   Usage: (also see sample hrs.heart.rate.sb for more details)
'//
'//     (*) Call StartAdverts(...) from your code
'//
'//
'//******************************************************************************

'//******************************************************************************
'// Definitions
'//******************************************************************************

'//******************************************************************************
'// Library Import
'//******************************************************************************

'//******************************************************************************
'// Global Variable Declarations
'//******************************************************************************

dim advState                '//will be 0 if not advertising, 1,2,3,4 for the four advert types
dim advType                 '//as per ADV_ in ble.sblib
dim addr$                   '//Peer address for Directed Adverts (MSB first) and exactly 6 bytes long
dim advInt                  '//Adv interval in milliseconds
dim advTmout                '//Adv timeout in milliseconds
dim advFilPol               '//Adv filter policy - see ADV_FILTERPOLICY_xxx in blelib.sblib
                            '// 0 = Any
                            '// 1 = Filter Scan Request
                            '// 2 = Filter Connection Request
                            '// 3 = Both

'//******************************************************************************
'// Initialisse Global Variable
'//******************************************************************************

advState = 0
advType  = ADV_IND
addr$ = ""
advInt   = ADV_INTERVAL_MS
advTmout = ADV_TIMEOUT_MS
advFilPol= ADV_WHITELIST_FILTER_POLICY

'//******************************************************************************
'// Function and Subroutine definitions
'//******************************************************************************

'//==============================================================================
'// returns 0 if parameters are acceptable
'//==============================================================================
function SetAdvertType(byval adType as integer,byref ad$ as string) as integer
  if (adType>=ADV_IND)&&(adType<=ADV_NONCONN_IND) then
    if (adType==ADV_DIRECT_IND) then
      if (strlen(ad$)!=6)  then
        exitfunc 0
      endif
      addr$=ad$
    endif
    advType = adType
    exitfunc 1
  endif
endfunc 0

'//==============================================================================
'//==============================================================================
function GetAdvertState() as integer
endfunc advState

'//==============================================================================
'//==============================================================================
function SetAdvertInt(intvl as integer) as integer
  if intvl < 20 then
    exitfunc 0
  endif
  if advType >= ADV_SCAN_IND then
    if intvl < 100 then
      exitfunc 0
    endif
  endif
  advInt = intvl
endfunc 1

'//==============================================================================
'//==============================================================================
function SetAdvertTout(inttm as integer) as integer
  if inttm < (advInt+20) then
    exitfunc 0
  endif
  advTmout = inttm
endfunc 1

//==============================================================================
//==============================================================================
function SetPeerAddr(ad$ as string) as integer
  ad$=StrDehexize$(ad$)
  if strlen(ad$) != 7 then
    exitfunc 5
  endif
  addr$=ad$
endfunc 0

'//==============================================================================
'//==============================================================================
function SetAdvertFPol(fpol as integer) as integer
  if (fpol >= ADV_FILTERPOLICY_ANY)&&(fpol <= ADV_FILTERPOLICY_BOTH)then
    advFilPol = fpol
    exitfunc 1
  endif
endfunc 0

'//==============================================================================
'// Returns 0 if successful, otherwise appropriate error code
'//==============================================================================
function StopAdverts() as integer
  dim rc
  rc=0
  if advState != 0 then
    //currently advertising
    rc = BleAdvertStop()
    AssertResCode(rc,3000)
    if rc==0 then
      //adverts stopped successfully
      advState=0
    endif
  endif
endfunc rc

'//==============================================================================
'// -1 for the last valid type of advert that was sent
'//  0 ADV_IND
'//  1 ADV_DIRECT_IND
'//  2 ADV_SCAN_IND
'//  3 ADV_NONCONN_IND
'//
'// Returns 0 if successful, otherwise appropriate error code
'//==============================================================================
function StartAdverts(adv as integer) as integer
  dim rc
  if advState == 0 then
    //currently not advertising
    if adv == -1 then
      adv = advType
    elseif (adv<0)||(adv>3) then
      //invalid advertising type
      rc=0xEF01
      AssertResCode(rc,3120)
      exitfunc rc
    endif
    rc = BleAdvertStart(adv,addr$,advInt,advTmout,advFilPol)
    AssertResCode(rc,3100)
    //
    // Warning: If you get an error here it is most likely that you
    //          have limited discoverability and the advert timeout is > 180000
    //
    if rc==0 then
      //adverts started successfully
      advType = adv
      advState = advType + 1
    endif
  else
    //currently advertising
    rc=0xEF00
    AssertResCode(rc,3110)
  endif
endfunc rc


'//==============================================================================
'// MUST be called from the BLE message handler
'//==============================================================================
sub AdvMngrOnBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER)
  dim rc

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    advState=0

  case BLE_EVBLEMSGID_DISCONNECT
    '// restart advertising
    rc=StartAdverts(-1)
    AssertResCode(rc,3200)

  case else
    //Do nothing
  endselect

endsub

'//==============================================================================
'// Will return 0 if no longer advertising
'//==============================================================================
function AdvMngrOnAdvTimeOut() as integer
  advState = 0
endfunc advState




'//******************************************************************************
'// Handler definitions
'//******************************************************************************

'//******************************************************************************
'// Other initialisations
'//******************************************************************************



