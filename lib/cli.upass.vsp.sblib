// Copyright (c) 2013, Laird
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
// SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
// IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
// SPDX-License-Identifier:ISC
//
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++                                                                      ++
// +++++  When UwTerminal downloads the app it will store it as a filenname   ++
// +++++  which consists of all characters up to the first . and excluding it ++
// +++++                                                                      ++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
// Virtual Serial Port "External" Loopback
//
//******************************************************************************

//******************************************************************************
// Definitions
//******************************************************************************

//******************************************************************************
// Register Error Handler as early as possible
//******************************************************************************
sub HandlerOnErr()
  if (ENABLE_DEBUG_PRINTS!=0) then
    print "\n OnErr - ";GetLastError();"\n"
  endif
endsub
onerror next HandlerOnErr

//******************************************************************************
// Library Import
//******************************************************************************
#include "lib\debugging.routines.sblib"
#include "lib\ble.sblib"
#include "lib\standard.advert.mngr.sblib"
#include "lib\advert.report.manager.sblib"
#include "lib\connection.manager.sblib"
#include "lib\security.manager.sblib"
#include "lib\gap.service.sblib"
#include "lib\device.information.service.sblib"

//******************************************************************************
// Debugging resource after libs
//******************************************************************************

//==============================================================================
//==============================================================================
sub DbgInfo(id as integer)
  select id
  case 0
    DbgPrnAdvReport(adRpt$)
  case 1
    DbgPrnAdvReport(scRpt$)

  case else
  endselect
endsub


//******************************************************************************
// Global Variable Declarations
//******************************************************************************

dim stRsp$ as string        //Uart rx data is stored here
dim ok$,er$
dim msg$
dim mnltk                   //Min size of ltk
dim mxltk                   //Max size of ltk
dim advFlags                //Value for flags AD
dim adTag                   //AD Tag
dim adDta$                  //AD Data

dim tsz                     //txbuf size for VSP
dim rsz                     //rxbuf size for VSP
dim flgs                    //Flags for VSP
dim uuhdl                   //Service uuid handle for VSP
dim rx$                     //VSP read data stored here
dim rxb                     //VSP read block size

//******************************************************************************
// Initialisse Global Variable
//******************************************************************************

ok$      = "\nOK\r\n>"
er$      = "\nERROR\r\n>"

mnltk    = MIN_LTK_SIZE
mxltk    = MAX_LTK_SIZE
advFlags = DISCOVERY_MODE    //Can be changed via 'fg' command

adTag    = 0
adDta$   = ""

tsz      = 112
rsz      = 144
flgs     = 1
uuhdl    = 0

rxb      = 60

//******************************************************************************
// Function and Subroutine definitions
//******************************************************************************


//==============================================================================
//==============================================================================
sub UartRsp(rsp as integer)
  dim rc
  if rsp == 0 then
    rc = UartWrite(ok$)
  else
    rc = UartWrite(er$)
  endif
endsub

//==============================================================================
//==============================================================================
sub UartMsg(byref msg$ as string)
  dim rc
  rc = UartWrite(msg$)
endsub


//==============================================================================
//==============================================================================
function StartAds(adv as integer) as integer
  dim rc
  rc=StartAdverts(adv)
  if rc==0 then
    DbgMsgVal("Start Adverts",adv)
  endif
endfunc rc

//==============================================================================
//==============================================================================
function StopAds() as integer
  dim rc
  rc=StopAdverts()
  if rc==0 then
    DbgMsg("Stop Adverts")
  endif
endfunc rc

//==============================================================================
//==============================================================================
function ProcAdvCmd(vl as integer) as integer
  dim rc
  if vl==0 then
    rc= StopAds()
  else
    vl=vl-1
    rc= StartAds(vl)
  endif
endfunc rc

//==============================================================================
//==============================================================================
sub ShowConnParms(nCtx as integer)
  dim rc
  dim intrvl,sprvto,slat
  rc= BleGetCurConnParms(nCtx,intrvl,sprvto,slat)
  AssertResCode(rc,1240)
  if rc==0 then
    DbgMsgVal("Conn Interval",intrvl)
    DbgMsgVal("Conn Supervision Timeout",sprvto)
    DbgMsgVal("Conn Slave Latency",slat)
  endif
endsub


//==============================================================================
//==============================================================================
function ProcScanData(st$ as string)
  dim rc
  rc = 1
  if strlen(st$) >= 1 then
    adTag  = StrGetChr(st$,0)
    adDta$ = mid$(st$,1,65535)
    rc=0
  endif
endfunc rc


//==============================================================================
//==============================================================================
function VSpOpen()
  dim rc
  rc = BleVSpOpen(tsz,rsz,flgs,uuhdl)
  AssertResCode(rc,7400)
  if rc==0 then
    print "\nBleVSpOpen() OK  (uuhdl=";uuhdl;")\n"
    //Get the rx read block size, and limit to 60 so that large block
    //from heap is not taken
    rxb = BleVspInfo(1)
    if rxb > 60 then
      rxb = 60
    endif
  else
    print "\nBleVSpOpen() FAILED  (rc=";rc;")\n"
  endif
endfunc rc

//==============================================================================
//==============================================================================
function VSpClose()
  BleVSpClose()
  print "\nBleVSpClose() OK"
endfunc 0

//==============================================================================
//==============================================================================
function VSpInfo(itype)
  print "\nBleVSpInfo(";itype;") returned ";BleVSpInfo(iType)
endfunc 0

//==============================================================================
//==============================================================================
function VSpWrite(x$)
  dim n
  n = BleVSpWrite(x$)
  print "\nBleVSpWrite(x$) returned ";n;" and len of x$ was ";strlen(x$)
endfunc 0

//==============================================================================
//==============================================================================
function VSpWriteEx(ln)
  dim n,r,x$
  r=strfill(x$,0,ln)
  if r==0 then
    ln= ln-1
    for n=0 to ln
      r = 0x41 + (n%57)   //'A' + offset
      r = strsetchr(x$,r,n)
    next
    r = BleVSpWrite(x$)
    print "\nBleVSpWrite(x$) returned ";r;" and len of x$ was ";strlen(x$)
  else
    exitfunc r
  endif
endfunc 0

//==============================================================================
//==============================================================================
function VSpRead(ilen)
  dim n
  n = BleVSpRead(rx$,ilen)
  print "\nBleVSpRead(,";ilen;") returned ";n;" and datalen ";strlen(rx$)
  print "\nData=";rx$
endfunc 0

//==============================================================================
//==============================================================================
function VSpAdvert()
  dim rc,rpt$
  rc = BleAdvRptAddUuid128(scRpt$,uuhdl)
  AssertResCode(rc,7410)
  if rc == 0 then
    rpt$=""
    rc = BleAdvRptsCommit(rpt$,scRpt$)
    AssertResCode(rc,7420)
  endif
  if rc == 0 then
    print "\nVSP added 128 uuid to scanrpt"
  endif
endfunc rc

//==============================================================================
// This is called to start things off just before the waitevent at the end of
// the file
//==============================================================================
sub OnStartup()
  dim rc

  InitSecurityMngr(PAIRING_IOCAPABILITY,MIN_LTK_SIZE, MAX_LTK_SIZE)

  //Initialise services
  InitGapService()
  InitDisService()

  //Initiliase advert and scan reports
  InitAdvReports(advFlags)

  //Initialise VSP service
  rc = VSpOpen()
  AssertResCode(rc,7982)

  //Add the VSP service to the scan report
  rc = VSpAdvert()
  AssertResCode(rc,7981)
rc = StartAds(ADV_IND)

endsub


//******************************************************************************
// Handler definitions
//******************************************************************************

//==============================================================================
// This handler is called when there is a BLE message
//==============================================================================
function HandlerBleMsg(BYVAL nMsgId AS INTEGER, BYVAL nCtx AS INTEGER) as integer

  // Inform libraries
  ConnMngrOnBleMsg(nMsgId,nCtx)
  AdvMngrOnBleMsg(nMsgId,nCtx)

  select nMsgId
  case BLE_EVBLEMSGID_CONNECT
    DbgMsgVal(" --- Connect : ",nCtx)
    ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_DISCONNECT
    DbgMsgVal(" --- Disconnect : ",nCtx)

  case BLE_EVBLEMSGID_IMMEDIATE_ALERT_SERVICE_ALERT
    DbgMsgVal( "\n --- Immediate Alert Service Alert ", nCtx)
    DbgMsg("\n")

  case BLE_EVBLEMSGID_DISPLAY_PASSKEY
    DbgMsgVal("Display Pairing Passkey ",nCtx)

  case BLE_EVBLEMSGID_NEW_BOND
    DbgMsg(" +++ New Bond")

  case BLE_EVBLEMSGID_UPDATED_BOND
    DbgMsg(" +++ Updated Bond")

  case BLE_EVBLEMSGID_ENCRYPTED
    DbgMsg(" +++ Encrypted Connection")

  case BLE_EVBLEMSGID_CONN_TO_BONDED_MASTER
    DbgMsgVal(" -- Conn to Bonded Master ",nCtx)

  case BLE_EVBLEMSGID_AUTH_KEY_REQUEST
    DbgMsgVal(" +++ Auth Key Request, type=",nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE
    ShowConnParms(nCtx)

  case BLE_EVBLEMSGID_CONN_PARMS_UPDATE_FAIL
    DbgMsg(" ??? Conn Parm Negotiation FAILED")

  case else
    DbgMsgVal("Unknown Ble Msg", nMsgId)
  endselect
endfunc 1

//==============================================================================
// This handler is called when data has arrived at the virtual serial port
// or if the vsp tx buffer is empty
//==============================================================================
function HandlerLoop()
  BleVspUartBridge()
endfunc 1

//==============================================================================
// This handler is called when data has arrived at the serial port
//==============================================================================
function HandlerBlrAdvTimOut() as integer

  if AdvMngrOnAdvTimeOut() == 0 then

    DbgMsg( "\nAdvert stopped via timeout" )
    //DbgMsg( "\n   - could use SystemStateSet(0) to switch off" )

    //------------------------------------------------------------
    //  Switch off the system - requires a power cycle to recover
    //------------------------------------------------------------
    //  rc = SystemStateSet(0)
    //  AssertResCode(rc,1199)
  endif

endfunc 1

//******************************************************************************
// Equivalent to main() in C
//******************************************************************************

//------------------------------------------------------------------------------
// Enable synchronous event handlers
//------------------------------------------------------------------------------

OnEvent  EVBLE_ADV_TIMEOUT  call HandlerBlrAdvTimOut
OnEvent  EVBLEMSG           call HandlerBleMsg  //EVBLEMSG indicate when signifficant BLE event occurs. Function HandlerBleMsg is called to interparate Message ID and context

//All events have the same handler
OnEvent  EVVSPRX            call HandlerLoop    //EVVSPRX is thrown when VSP is open and data has arrived
OnEvent  EVUARTRX           call HandlerLoop    //EVUARTRX  = data has arrived at the UART interface
OnEvent  EVVSPTXEMPTY       call HandlerLoop
OnEvent  EVUARTTXEMPTY      call HandlerLoop

//------------------------------------------------------------------------------
// Initialise Services and then wait for events
//------------------------------------------------------------------------------
if (AUTO_STARTUP & 1) != 0 then
  //Create Advert packets and register services
  OnStartup()
endif
if (AUTO_STARTUP & 2) != 0 then
  //Start advertising
  dim rc
  rc=StartAds(ADV_IND)
endif

//Send user prompt for uart based command interface
msg$="\n\r"
UartMsg(msg$)
msg$=DEVICENAME
UartMsg(msg$)
msg$="\n\r"
UartMsg(msg$)

//Send an OK response
UartRsp(0)

